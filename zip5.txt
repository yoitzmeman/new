import torch
import torchvision
import torchvision.transforms as T
from PIL import Image
import cv2
import numpy as np
import matplotlib.pyplot as plt

model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True)
model.eval()
COCO_INSTANCE_CATEGORY_NAMES = [
'__background__', 'person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus',
'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'N/A', 'stop sign',
'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow',
'elephant', 'bear', 'zebra', 'giraffe', 'N/A', 'backpack', 'umbrella', 'N/A', 'N/A',
'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball',
'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket',
'bottle', 'N/A', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl',
'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza',
'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'N/A', 'dining table',
'N/A', 'N/A', 'toilet', 'N/A', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone',
'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'N/A', 'book',
'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush'
]
THRESHOLD = 0.8

test_image_path ='image.jpg'
test_image = Image.open(test_image_path)
transform = T.Compose([T.ToTensor()])
test_image_tensor = transform(test_image)

with torch.no_grad():
    predictions = model([test_image_tensor])
prediction = predictions[0]

bounding_boxes = prediction['boxes'].cpu().detach().numpy()
class_labels = prediction['labels']

test_image = cv2.imread(test_image_path)
test_image = cv2.cvtColor(test_image, cv2.COLOR_BGR2RGB)
font = cv2.FONT_HERSHEY_SIMPLEX
font_scale = 1.0
font_color = (0, 0, 0)
font_thickness = 2
classes_to_keep = ["dog", "cat"]

for box_index, (box, label) in enumerate(zip(bounding_boxes, class_labels)):
    class_name = COCO_INSTANCE_CATEGORY_NAMES[label]
    if class_name in classes_to_keep:
        x1, y1, x2, y2 = map(int, box)
        cv2.rectangle(test_image, (x1, y1), (x2, y2), np.random.randint(0, 256, 3).tolist(), 2)
        cv2.putText(test_image, class_name, (x1, y1 - 10), font, font_scale, font_color, font_thickness)

plt.imshow(test_image)
plt.axis('off')
plt.show()
